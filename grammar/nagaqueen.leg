%{
#include <stdio.h>
#include <string.h>

#define _OBRACK "{"
#define _CBRACK "}"

void *GC_malloc(size_t);
void *GC_calloc(size_t, size_t);
void *GC_realloc(void *, size_t);
void GC_free(void *);

#define YY_ALLOC(N, D)      GC_malloc(N)
#define YY_CALLOC(N, S, D)  GC_malloc((N) * (S))
#define YY_REALLOC(B, N, D) GC_realloc(B, N)
#define YY_FREE             GC_free

#define YYSTYPE void*
#define YY_STACK_SIZE 1024

//#define YY_DEBUG 1

/* Current line number */
static int yylineno;

/* Path of the file we're parsing. */
static char* path;
 
/* The stream we're reading from. */
static FILE *stream;

/* Send input to yyparse from codebuf instead of stdin */
#define YY_INPUT(buf, result, max_size) {        \
    result = fread(buf, 1, max_size, stream);    \
    static int doneNewlineHack = 0;              \
    if(result == 0 && doneNewlineHack == 0) {    \
        doneNewlineHack = 1;                     \
        char last = buf[strlen(buf) - 1];        \
        if(last != '\n') {                       \
            (*buf) = '\n';                       \
            result = 1;                          \
        }                                        \
    }                                            \
}

///////////////////// callbacks def start, you may want to skip this ////////////////////////

char *nq_StringClone(char *string);

void nq_onInclude(char *path, char *name);
void nq_onImport (char *path, char *name);

void nq_onCoverStart(char *name);
void nq_onCoverFromType(void *type);
void nq_onCoverExtends(void *type);
void nq_onCoverEnd();

void nq_onClassStart(char *name);
void nq_onClassAbstract();
void nq_onClassFinal();
void nq_onClassExtends(void *type);
void nq_onClassEnd();

void nq_onVarDeclStart();
void nq_onVarDeclName(char *name);
void nq_onVarDeclExpr(void *expr);
void nq_onVarDeclType(void *type);
void nq_onVarDeclStatic();
void nq_onVarDeclEnd();

void *nq_onTypeNew(char *name);     // $$=nq_onTypeNew(yytext)
void *nq_onTypePointer(void *type); // $$=nq_onTypePointer($$)
void *nq_onFuncTypeNew();

/////////////////////                callbacks def end               ////////////////////////

%}

Module  = WS Include WS                       { printf("\n") }
        | WS Import WS                        { printf("\n") }
        | WS Stmt WS
        | WS Decl WS                          { printf("\n") }
        | WS ( !EOL . )* EOL                  { printf("\nerror\n"); }
        
Include = INCLUDE_KW
          - IDENT  { nq_onInclude("", yytext) }
          (
          - COMMA
          - IDENT { nq_onInclude("", yytext) }
          )*
          
Import  = IMPORT_KW
          - ImportAtom
          (
          COMMA WS
          - ImportAtom
          )*
          
ImportAtom = path:ImportPath
            ((name:ImportName           { nq_onImport((char*) path, (char*) name); })
            | (
            OPEN_SQUAR
            (name:ImportName - COMMA WS { nq_onImport((char*) path, (char*) name); })*
            (name:ImportName            { nq_onImport((char*) path, (char*) name); })
            CLOS_SQUAR
            ))

ImportPath = < (([A-Za-z_0-9] | ".")+ "/")* > { $$=nq_StringClone(yytext); }
ImportName = < [A-Za-z_0-9]+ >                { $$=nq_StringClone(yytext); }
            

Decl    = { printf("\n"); }
          ( ClassDecl
          | CoverDecl
          | OperatorDecl
          | FunctionDecl
          | VariableDecl
          )

OperatorDecl =
            OPERATOR_KW { printf("operator "); }
            - < (PLUS | MINUS | STAR | SLASH | EQUALS | NOT_EQUALS
              | MORETHAN | MORETHAN_EQ | LESSTHAN | LESSTHAN_EQ
              | ASS_ADD | ASS_SUB | ASS_MUL | ASS_DIV | "[]=" | "[]") >
              { printf("%s ", yytext) }
            
            # arguments are optional
            (
                - OPEN_PAREN { printf("(") }
                (WS Argument WS
                    (COMMA { printf(", ") } WS VariableDecl )*
                )?
                - CLOS_PAREN { printf(")") }
            )?
            
            # return type is optional     
            (
                - R_ARROW - { printf(" -> "); } Type
            )?
            
            # body
            - OPEN_BRACK WS { printf(" %s\n", _OBRACK) }
            (WS (Stmt) WS)*
            WS CLOS_BRACK  { printf("%s\n", _CBRACK); }

FunctionDecl =
            IDENT { printf("%s:", yytext); }
            - COLON
            
            # modifiers
            (-  ( ExternName
                | ABSTRACT_KW { printf(" abstract") }
                | STATIC_KW   { printf(" static") }
                | INLINE_KW   { printf(" inline") }
                | FINAL_KW    { printf(" final") }
                )
            )*
            
            - FUNC_KW { printf(" func") }
            
            # optional suffix
            (
            - TILDE
            - IDENT { printf(" ~%s", yytext) }
            )?
            
            # arguments are optional
            (
                - OPEN_PAREN { printf("(") }
                (WS Argument WS
                    (COMMA { printf(", ") } WS Argument )*
                )?
                - CLOS_PAREN { printf(")") }
            )?
            
            # return type is optional     
            (
                - R_ARROW - { printf(" -> "); } Type
            )?
            
            # body is optional (for abstract/extern-named functions)
            (
                - OPEN_BRACK WS { printf(" %s\n", _OBRACK) }
                (WS (Stmt) WS)*
                WS CLOS_BRACK  { printf("%s\n", _CBRACK); }
            )?
            
Argument    = ( (DOT IDENT -)  { printf(".%s", yytext) }
              | (ASS IDENT -)  { printf("=%s", yytext) }
              | VariableDecl
              | Type
              )
            
            
ClassDecl   = (
            IDENT { nq_onClassStart(yytext); }
            - COLON
            
            # modifiers
            (-  ( ExternName
                | ABSTRACT_KW { nq_onClassAbstract() }
                | FINAL_KW    { nq_onClassFinal() }
                )
            )*
            
            - CLASS_KW { printf(" class") }
            
            # subclassing
            (
            - EXTENDS_KW - IDENT { nq_onClassExtends(yytext) }
            )?
            
            # body is optional (for abstract classes)
            (
                - OPEN_BRACK WS { printf(" %s\n", _OBRACK) }
                
                # classdecl contents
                (WS
                    { printf("\n") }
                    ( VariableDecl
                    | FunctionDecl
                    )
                WS)*
                
                WS CLOS_BRACK  { printf("\n%s", _CBRACK); }
            )?
            ) { nq_onClassEnd() }
            
CoverDecl   = (
            IDENT { nq_onCoverStart(yytext) }
            - COLON
            
            # modifiers
            (- ExternName)?
            
            - COVER_KW { printf(" cover") }
            
            # covering another type
            (
            - FROM_KW { printf(" from ") }
            - Type { nq_onCoverFromType($$) }
            )?
            
            # extending another type
            (
            - EXTENDS_KW { printf(" extends ") }
            - IDENT      { printf("%s", yytext) }
            )?

            # body is optional for covers
            (
                - OPEN_BRACK WS { printf(" %s\n", _OBRACK) }
                
                # coverdecl contents
                (WS
                    { printf("\n") }
                    ( VariableDecl
                    | FunctionDecl
                    )
                WS)*
                
                WS CLOS_BRACK  { printf("\n%s", _CBRACK); }
            )?
            )
            { nq_onCoverEnd(); }
            
ExternName = EXTERN_KW { printf(" extern") }
              (
              - OPEN_PAREN
              - IDENT { printf("(%s)", yytext); }
              - CLOS_PAREN
              )?

VariableDecl = { nq_onVarDeclStart(); }
            (
            IDENT { nq_onVarDeclName(yytext); }
            (ASS Expr { nq_onVarDeclExpr($$); })?
            
            # multi-decls
            (
            - COMMA
            - IDENT { nq_onVarDeclName(yytext); }
            (- ASS Expr { nq_onVarDeclExpr($$); })?
            -
            )*
            
            - COLON
            (- STATIC_KW { nq_onVarDeclStatic(); })?
            - Type { nq_onVarDeclType($$); }
            )  { nq_onVarDeclEnd(); }
            
Type    = FuncType |
          (< (CONST_KW { printf("const "); } -)?
            (
                ( "unsigned"             - { printf("unsigned ") }
                | "signed"               - { printf("signed ") }
                | "long" &(- "long")     - { printf("long ") }
                )
            - )*
            IDENT 
          > { $$=nq_onTypeNew(yytext); }
          (STAR { $$=nq_onTypePointer($$); }
          | "[" { printf("["); } - Expr? "]" { printf("]"); }
          )*
          -
          )
          
FuncType  = ("Func"
            (
            - OPEN_PAREN
            (- Argument)?
            (COMMA - Argument)*
            - CLOS_PAREN
            )?
            ) { $$=nq_onFuncTypeNew(); }

Stmt    = { printf("\n"); } (
          ( # some statements need an EOL after them...
              ( WS r:Return
              | WS v:VariableDecl
              | WS e:Expr
              )
              (EOL | (&CLOS_BRACK) | (&CommentLine))
          )
          | # ...but block don't
          ( WS c:Conditional
          | WS f:FlowControl
          ) )
          
Conditional = (If | Else)

If      = IF_KW     { printf("if ("); }
          - OPEN_PAREN
          - Expr
          - CLOS_PAREN  { printf(") "); }
          - Body
          
Else    = ELSE_KW   { printf("else ("); }
          - OPEN_PAREN
          - Expr
          - CLOS_PAREN  { printf(") "); }
          - Body
          
FlowControl = (Foreach | While)
          
Foreach = FOR_KW        { printf("for ("); }
          - OPEN_PAREN
          - (VariableDecl | Expr)
          - IN_KW       { printf(" in "); }
          - Expr
          - CLOS_PAREN  { printf(") "); }
          - Body
          
While = WHILE_KW    { printf("while ("); }
        - OPEN_PAREN
        - Expr
        - CLOS_PAREN  { printf(") "); }
        - Body

Body =  (
        OPEN_BRACK    { printf(" %s\n", _OBRACK) }
        (WS Stmt WS)*
        WS CLOS_BRACK   { printf("\n%s", _CBRACK) }
        ) | Stmt
          
Return  = RETURN_KW { printf("return ") } - e:Expr

Expr    = b:BinaryOperation -

#operators

BinaryOperation = Assignment

Assignment = l: Ternary
                ( ASS                 { printf(" = ");   }    r: Ternary
                | ASS_ADD             { printf(" += ");  }    r: Ternary
                | ASS_SUB             { printf(" -= ");  }    r: Ternary
                | ASS_MUL             { printf(" *= ");  }    r: Ternary
                | ASS_DIV             { printf(" /= ");  }    r: Ternary
                | ASS_B_LSHIFT        { printf(" >>= "); }    r: Ternary
                | ASS_B_RSHIFT        { printf(" <<= "); }    r: Ternary
                | ASS_B_XOR           { printf(" ^= ");  }    r: Ternary
                | ASS_B_OR            { printf(" |= ");  }    r: Ternary
                | ASS_B_AND           { printf(" &= ");  }    r: Ternary
                | ASS_DECL            { printf(" := ");  } (- CONST_KW { printf(" const") })?  r: Ternary
                )*
                
Ternary =   LogicalOr
            (
          - QUEST  { printf(" ? "); }
          - LogicalOr
          - COLON  { printf(" : "); }
          - LogicalOr
            )*

LogicalOr = l:LogicalAnd
                ( L_OR          { printf(" || "); }     r: LogicalAnd
                )*

LogicalAnd = l:BinaryOr
                ( L_AND         { printf(" && "); }     r: BinaryOr
                )*

BinaryOr = l:BinaryXor
                ( B_OR          { printf(" | "); }      r: BinaryXor
                )*

BinaryXor = l:BinaryAnd
                ( B_XOR         { printf(" ^ "); }      r: BinaryAnd
                )*

BinaryAnd = l:Equality
                ( B_AND         { printf(" & "); }      r: Equality
                )*

Equality = l:Inequality
                ( EQUALS        { printf(" == "); }     r:Inequality
                | NOT_EQUALS    { printf(" != "); }     r:Inequality
                )*

Inequality = l:Range
                ( LESSTHAN      { printf(" < ");  }     r:Range
                | MORETHAN      { printf(" > ");  }     r:Range
                | LESSTHAN_EQ   { printf(" <= "); }     r:Range
                | MORETHAN_EQ   { printf(" >= "); }     r:Range
                )*
                
Range   = l:Shift
                ( DOUBLE_DOT    { printf("..");   }     r:Shift
                )*

Shift   = l:Sum
                ( B_LSHIFT      { printf(" << "); }     r:Sum
                | B_RSHIFT      { printf(" >> "); }     r:Sum
                )*

Sum     = l:Product
                ( PLUS          { printf(" + "); }      r:Product
                | MINUS         { printf(" - "); }      r:Product
                | PERCENT       { printf(" %% "); }      r:Product
                )*

Product = ( L_NOT               { printf("!"); }
          | B_NOT               { printf("~"); }
          )*
          l:Access
                ( STAR         { printf(" * "); }       r:Access
                | SLASH        { printf(" / "); }       r:Access
                )*
                
Access = Value
                ( { printf("["); } OPEN_SQUAR - Expr - CLOS_SQUAR - { printf("]"); }
                | { printf(" "); } FunctionCall -
                | { printf(" "); } !IN_KW VariableAccess -
                | { printf(" as "); } AS_KW - r:Type
                )*
                
FunctionCall = IDENT OPEN_PAREN { printf("%s(", yytext); } -
               (Expr (- COMMA { printf(", "); } WS Expr)*)?
               - CLOS_PAREN { printf(")"); }

VariableAccess = i:IDENT          { printf("%s", yytext)   }

Value   = ( PLUS    { printf("+"); }
          | MINUS   { printf("-"); }
          )?
        ( f:FLOAT_LIT                                     { printf("%s", yytext); }
        | i:INT_LIT                                       { printf("%s", yytext); }
        | s:STRING_LIT                                    { printf("\"%s\"", yytext); }
        | c:CHAR_LIT                                      { printf("'%s'", yytext); }
        | OPEN_PAREN { printf("(") }  i:Expr CLOS_PAREN   { printf(")"); }
        | FunctionCall
        | VariableAccess
        )

RETURN_KW    = "return"
FUNC_KW      = "func"
CLASS_KW     = "class"
COVER_KW     = "cover"
FROM_KW      = "from"
ABSTRACT_KW  = "abstract"
FINAL_KW     = "final"
STATIC_KW    = "static"
INLINE_KW    = "inline"
EXTENDS_KW   = "extends"
EXTERN_KW    = "extern"

IMPORT_KW    = "import"
INCLUDE_KW   = "include"
IF_KW        = "if"
ELSE_KW      = "else"
FOR_KW       = "for"
WHILE_KW     = "while"
AS_KW        = "as"
IN_KW        = "in"

OPERATOR_KW  = "operator"
CONST_KW     = "const"

            # 'class', 'in' voluntarily left out
KW           = RETURN_KW | FUNC_KW | COVER_KW | FROM_KW
             | ABSTRACT_KW | FINAL_KW | STATIC_KW | INLINE_KW
             | EXTENDS_KW | EXTERN_KW | IMPORT_KW | INCLUDE_KW
             | IF_KW | ELSE_KW | FOR_KW | WHILE_KW | AS_KW
             | OPERATOR_KW | CONST_KW

COMMA        = ','
DOT          = !DOUBLE_DOT '.'
COLON        = !ASS_DECL ':'

R_ARROW      = '->'

# Operators

ASS_DECL     = ':='  -
ASS          = '='   -
ASS_ADD      = '+='  -
ASS_SUB      = '-='  -
ASS_MUL      = '*='  -
ASS_DIV      = '/='  -
ASS_B_RSHIFT = '>>='  -
ASS_B_LSHIFT = '<<='  -
ASS_B_XOR    = '^='  -
ASS_B_OR     = '|='  -
ASS_B_AND    = '&='  -

QUEST        = '?'   -

L_OR         = '||'  -

L_AND        = '&&'  -

B_OR         = !L_OR '|'   -

B_XOR        = '^'   -

B_AND        = !L_AND '&'   -

EQUALS       = '=='  -
NOT_EQUALS   = '!='  -

LESSTHAN     = '<'   -
MORETHAN     = '>'   -
LESSTHAN_EQ  = '<='  -
MORETHAN_EQ  = '>='  -

B_LSHIFT     = '<<'  -
B_RSHIFT     = '>>'  -

DOUBLE_DOT   = '..'  -

L_NOT        = '!'   -
B_NOT        = '~'   -
PLUS         = '+'   -
MINUS        = '-'   -

PERCENT      = '%'   -
STAR         = '*'   -
SLASH        = '/'   -

OPEN_PAREN   = '('   -
CLOS_PAREN   = ')'   -

OPEN_SQUAR   = '['   -
CLOS_SQUAR   = ']'   -

OPEN_BRACK   = '{'   -
CLOS_BRACK   = '}'   -

TILDE   = '~'   -
-       = [ \t]*
EOL     = '\n' | '\r\n' | '\r' | ';'  { yylineno++; }
WS      = ([ \t] | Comment | EOL)*

Comment = (CommentLine | CommentMultiLine)
CommentLine = "//" (!EOL .)* EOL
CommentMultiLine = "/*" (!"*/" .)* "*/"

FLOAT_LIT    = < "-"? [0-9]+ DOT [0-9]* >                   -
INT_LIT      = < "-"? [0-9]+ >                   -
IDENT        = !(KW ![A-Za-z0-9_])  # a keyword is not an ident ;)
               < [a-zA-Z_][0-9a-zA-Z_]*  >  -   { $$=yytext; }

STRING_LIT   = ["] < (!'"' ('\\\"' | '\\n' | '\\r' | '\\t' | '\\0' | .))* > ["]       -
CHAR_LIT     = ['] < (!'"' ("\\\'" | '\\n' | '\\r' | '\\t' | '\\0' | .))  > [']       -

%%

int nq_parse(char *pathArg) {
    
    GREG *g = YY_ALLOC(sizeof(GREG), 0);
    
    /* Parse code */
    yylineno = 0;
    path = pathArg;
    stream = fopen(path, "r");
    yylineno = 0;
    
    while (yyparse(g)) {}
    fclose(stream);
    
    return 0;
    
}
